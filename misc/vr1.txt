vr1.mihudie.com  205.147.105.160  ubuntu server 14.04 64bit

root     / <on file>
jhancock / <on file>
mhd		 / <on file>

# as root
# set timezone to 'Etc/UTC'
dpkg-reconfigure tzdata
# update system
sudo apt-get update
sudo apt-get -y upgrade
# reboot
shutdown -r now

# set hostname - already set
#sudo vim /etc/hostname
#hostname -F /etc/hostname

# edit /etc/hosts  add:
50.116.1.15  lin1

# add jhancock & mhd users and give sudo
sudo adduser jhancock
sudo adduser jhancock sudo
sudo adduser mhd
sudo adduser mhd sudo

# byobu - already installed
byobu-config  # choose to enable byobu at login
# F-9 -> Change Escape Sequence, set to Ctr-S so Ctr-A works for beginning of line

# install an editor - already installed
#sudo apt-get install -y vim-nox

# setup login keys for jhancock & mhd
mkdir ~/.ssh
chmod 700 ~/.ssh
# add public key, from client
scp ~/.ssh/new_jhancock.pub ~/.ssh/new_jhancock jhancock@vr1:~/.ssh
scp ~/.ssh/jhancock_ss_id_rsa.pub ~/.ssh/jhancock_ss_id_rsa jhancock@vr1:~/.ssh
scp ~/.ssh/bitbucket_jhancock.pub ~/.ssh/bitbucket_jhancock jhancock@vr1:~/.ssh

# back to server
cat ~/.ssh/new_jhancock.pub > ~/.ssh/authorized_keys 

chmod 600 ~/.ssh/authorized_keys 

# repeat above for user mhd

# config sshd
sudo vim /etc/ssh/sshd_config
# edit:
PermitRootLogin yes -> PermitRootLogin no
# PasswordAuthentication yes -> PasswordAuthentication no

sudo restart ssh

# enable access to lin1 and bitbucket
vim ~/.ssh/config
# add:
Host lin1
  HostName lin1
  IdentityFile ~/.ssh/jhancock_ss_id_rsa
  Port 22
  Protocol 2
Host bitbucket.org
  Compression yes
  HostName bitbucket.org
  IdentityFile ~/.ssh/bitbucket_jhancock

# repeat above for user's jhancock and mhd

# setup ssh keychain
sudo apt-get install -y keychain
# see bottom of ~/.bashrc for keychain config

# install ntp
sudo apt-get install ntp
# view ntp stats
sudo ntpq -p



# install emacs
sudo apt-get install -y emacs24-nox

sudo apt-get install build-essential git curl zlib1g-dev libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev libcurl4-openssl-dev software-properties-common python-software-properties autoconf automake libtool bison pkg-config htop

# setup dotfiles on both jhancock and mhd
git clone git@bitbucket.org:jhancock/mhd-dotfiles.git ~/dotfiles
# run dotfiles create_links.sh script

# copy .rails_env to /home/mhd/.rails_env
# edit for production

# install mosh
sudo apt-get install software-properties-common python-software-properties
sudo add-apt-repository ppa:keithw/mosh
sudo apt-get update
sudo apt-get install mosh


##############################
##       base READY         ##
##############################


#####################################
##  install rbenv, ruby and rails  ##
#####################################

# install rbenv && and ruby-build plugin
git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

# next two lines should be modified from the dotfiles 
#echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
#echo 'eval "$(rbenv init -)"' >> ~/.bashrc

# restart shell and verify
exec $SHELL
type rbenv
#=> "rbenv is a function"

git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

# Install Ruby 2.1.2 and set it as the default version

# ~/.gemrc should already be modified from the dotfiles
#echo "gem: --no-ri --no-rdoc" > ~/.gemrc

rbenv install 2.1.2
# go to orginal source if mirrors are giving trouble
# RUBY_BUILD_SKIP_MIRROR=true rbenv install 2.1.2

rbenv global 2.1.2
ruby -v
#=>ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]
# gem sources -a https://rubygems.org/
# gem sources -r http://ruby.taobao.org/

rbenv rehash
gem update
rbenv rehash

gem install bundler
# change gem source if above doesn't work

rbenv rehash

# clone git repo
git clone git@bitbucket.org:jhancock/mhd-rails.git ~/rails
cd ~/rails

# do this anytime specs may have changed
bundle install --without development test

rbenv rehash


##########################
##    setup mongodb     ##
##########################

# ensure books are in ~/books
scp mhd@lin1:~/books-20140923.tar.gz ~/.

# ensure mongo_dump has latest

# ensure books_upload
scp mhd@lin1:~/books_upload-20140923.tar.gz .

# install mongo
# http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10

echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list

sudo apt-get update

sudo apt-get install -y mongodb-org=2.6.4 mongodb-org-server=2.6.4 mongodb-org-shell=2.6.4 mongodb-org-mongos=2.6.4 mongodb-org-tools=2.6.4

echo "mongodb-org hold" | sudo dpkg --set-selections
echo "mongodb-org-server hold" | sudo dpkg --set-selections
echo "mongodb-org-shell hold" | sudo dpkg --set-selections
echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
echo "mongodb-org-tools hold" | sudo dpkg --set-selections

# start service - should already be started
sudo service mongod start

# log - /var/log/mongodb/mongod.log
# data - /var/lib/mongodb

# to stop or restart service
sudo service mongod stop
sudo service mongod restart

# restore data - restores the collections to the running mongod
# when extracting a tar dumped from production, untar and then go into 
# the directory rm -rf admin/  and rename mhd_production to mhd_development if needed

mongorestore /home/mhd/mongo_dump/lin1-20140923114602/mhd_production/

# create indexes with mongoid rake task

### HERE ####

####################################
##    setup nginx-passenger       ##
####################################

# from https://www.phusionpassenger.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
sudo apt-get install -y apt-transport-https ca-certificates

sudo sh -c "echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main' >> /etc/apt/sources.list.d/passenger.list"
sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
sudo apt-get update

sudo apt-get install nginx-extras passenger

# Edit /etc/nginx/nginx.conf and uncomment passenger_root and passenger_ruby. 
# add to /etc/nginx/nginx.conf in http block:
passenger_max_pool_size 2;
passenger_pool_idle_time 0;
# add to bottom of http block, after sites-enabled is included
passenger_pre_start http://vr1.mihudie.com/; 
# ensure service can resolve vr1.mihudie.com.  Edit /etc/hosts

sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.original
sudo cp /home/mhd/rails/misc/nginx/nginx.conf /etc/nginx/nginx.conf

sudo service nginx restart
# ensure basic auth is present while still developing

# setup old shellshadow.com static site
# from /home/jhancock 
git clone git@bitbucket.org:jhancock/ss-www-static.git ~/ss-www-static

sudo cp /home/mhd/rails/misc/nginx/sites-available/shellshadow.com /etc/nginx/sites-available

sudo ln -s /etc/nginx/sites-available/shellshadow.com /etc/nginx/sites-enabled/shellshadow.com

# setup mihudie.com config
sudo cp /home/mhd/rails/misc/nginx/sites-available/mihudie.com /etc/nginx/sites-available/mihudie.com

sudo ln -s /etc/nginx/sites-available/mihudie.com /etc/nginx/sites-enabled/mihudie.com

sudo service nginx restart

# test! ;)
# sudo passenger-status
# sudo passenger-memory-stats

# if in production mode, this url should not work
# http://vr1.mihudie.com/rails/info/properties



# add grc generic colorizer
sudo apt-get install grc
grc tail -f ~/rails/log/production.log


##########################
##    Sidekiq / Redis   ##
##########################

sudo apt-get install redis-server



#########################
##       SCOUT         ##
#########################

scoutapp.com/jhancock
# installed under mhd@vr1

sudo gem install scout 
# next command run as mhd user
scout install nF4A61hTGlmBAtuOFA0lR1rMw7VU8ABx3hDaPjJZ 

## Ruby on Rails plugin
sudo gem install elif
sudo gem install request-log-analyzer
# from https://scoutapp.com/plugin_urls/181-ruby-on-rails-monitoring/help_entries/351

## Do not do!  This install process is for tracking mem usage and does not work.
# in Rails app
#add to Gemfile:
#gem 'oink'
#gem 'oink', group: :production
# add initialer file config/initializers/oink/rb with contents:
#Rails.application.middleware.use( Oink::Middleware, :logger => Rails.logger )

#add to Gemfile:
#gem 'hodel_3000_compliant_logger'

# add file https://raw.githubusercontent.com/topfunky/hodel_3000_compliant_logger/master/lib/hodel_3000_compliant_logger.rb to lib/hodel_3000_compliant_logger.rb 

# add to config/application.rb:
#config.logger = Hodel3000CompliantLogger.new(config.paths['log'].first)

#bundle install --without development test


## END Ruby on Rails plugin

## Passenger plugin
sudo su â€“ # change to the root user
visudo # edit the sudoers file.  Add to bottom:
mhd ALL=(root)NOPASSWD:/usr/sbin/passenger-status
mhd ALL=(root)NOPASSWD:/usr/sbin/passenger-memory-stats


# Mongo Slow Queries and MongoDB Database Stats plugins - MongoDB Database Stats, MongoDB Server Status, MongoDB Slow Queries
sudo apt-get install ruby-dev
sudo gem install mongo mongo_ext bson_ext



#########################
##     SSL for prod    ##
#########################


# edit ~/rails/.gitignore  ignore ssl directory
mkdir ~/rails/ssl
cd ~/rails/ssl
openssl genrsa -des3 -passout pass:x -out mihudie.pass.key 2048

openssl rsa -passin pass:x -in mihudie.pass.key -out mihudie.key
rm mihudie.pass.key

openssl req -new -key mihudie.key -out mihudie.csr
# press enter when asked for password

# This line completed by Comodo SSL service ;)
#openssl x509 -req -days 365 -in mihudie.csr -signkey mihudie.key -out mihudie.crt

openssl dhparam -out mihudie.dhparam.pem 2048

# ensure dev.mihudie.key is not stored in git

# verify cert.  The md5 of both commands should be the same
openssl rsa -noout -modulus -in mihudie.key | openssl md5

# use the main crt, not the full bundle
openssl x509 -noout -modulus -in mihudie_com.crt | openssl md5

#########################
##  SSL Stapling OCSP  ##
#########################

#######  Verify Start  #########

# verify stapling is working

openssl s_client -connect mihudie.com:443 -tls1 -tlsextdebug -status

# output should include:
OCSP response: 
======================================
OCSP Response Data:
    OCSP Response Status: successful (0x0)
    Response Type: Basic OCSP Response

########  Verify End  #########

##### Firewall Start ######
# do this to see what URLs need to be unblocked with firewall for outgoing connections 
# https://raymii.org/s/tutorials/OCSP_Stapling_on_nginx.html
# the following command does not work on OS X.  run from the dev VM.

OLDIFS=$IFS; IFS=':' certificates=$(openssl s_client -connect mihudie.com:443 -showcerts -tlsextdebug -tls1 2>&1 </dev/null | sed -n '/-----BEGIN/,/-----END/ {/-----BEGIN/ s/^/:/; p}'); for certificate in ${certificates#:}; do echo $certificate | openssl x509 -noout -ocsp_uri; done; IFS=$OLDIFS                        

# should output something like this:
http://ocsp.comodoca.com
http://ocsp.comodoca.com
http://ocsp.usertrust.com
					
# firewall needs to allow outbound connect to those locations
####### Firewall End  #######

################################
##        ElasticSearch       ##
################################

# install Oracle Java
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer

# auto-install accept license.  haven't tried:
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections

sudo apt-get install oracle-java8-set-default
# check
java -version

# install elasticsearch
# http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-repositories.html
# http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-service.html

wget -qO - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -

# add to /etc/apt/sources.list 
deb http://packages.elasticsearch.org/elasticsearch/1.3/debian stable main

sudo apt-get update 
sudo apt-get install elasticsearch

# setup to startup at boot
sudo update-rc.d elasticsearch defaults 95 10

# service does not start on install and does not restart on package upgrade
sudo service elasticsearch start | stop | restart
# or sudo /etc/init.d/elasticsearch start

# test
curl http://localhost:9200
curl http://localhost:9200/_cluster/health
curl http://localhost:9200/_nodes

# smartcn plugin
# https://github.com/elasticsearch/elasticsearch-analysis-smartcn
sudo /usr/share/elasticsearch/bin/plugin -install elasticsearch/elasticsearch-analysis-smartcn/2.3.1

# remove plugin
sudo service elasticsearch stop
sudo /usr/share/elasticsearch/bin/plugin --remove analysis-smartcn


# edit /etc/elasticsearch/elasticsearch.yml
# set mandatory plugin
plugin.mandatory: analysis-smartcn


########################
##       TARSNAP      ##
########################

# install tarsnap
cd ~/download
wget https://www.tarsnap.com/download/tarsnap-autoconf-1.0.35.tgz .
sudo make all install clean
# cp tarsnap.conf.sample
# put vr1 key in ~/tarsnap
# test
# grab ss-archive from tarsnap

cp books.tar and mongo-lin1-prod-dump






